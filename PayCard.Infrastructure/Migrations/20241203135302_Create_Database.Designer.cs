// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PayCard.Infrastructure.Database;

#nullable disable

namespace PayCard.Infrastructure.Migrations
{
    [DbContext(typeof(PayCardContext))]
    [Migration("20241203135302_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountDescription")
                        .HasMaxLength(140)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("description");

                    b.Property<decimal>("Balance")
                        .HasColumnType("Decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("bank_name");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("currency_id");

                    b.Property<int>("DailyTransactionsLimit")
                        .HasColumnType("int")
                        .HasColumnName("daily_transaction_limit");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("Varchar")
                        .HasColumnName("iban");

                    b.Property<bool>("IsActive")
                        .HasColumnType("Bit")
                        .HasColumnName("is_active");

                    b.Property<int>("MonthlyTransactionsLimit")
                        .HasColumnType("int")
                        .HasColumnName("monthly_transaction_limit");

                    b.Property<int>("PersonalInformationId")
                        .HasColumnType("int")
                        .HasColumnName("personal_information_id");

                    b.Property<string>("SwiftOrBIC")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("Varchar")
                        .HasColumnName("swift_or_bic");

                    b.Property<int>("WeeklyTransactionsLimit")
                        .HasColumnType("int")
                        .HasColumnName("weekly_transaction_limit");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("IBAN")
                        .IsUnique()
                        .HasDatabaseName("UQ_accounts_iban");

                    b.HasIndex("PersonalInformationId");

                    b.ToTable("accounts", "banking");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("address_line_1");

                    b.Property<string>("AddressLine2")
                        .HasMaxLength(100)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("address_line_2");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("city");

                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    b.Property<string>("District")
                        .HasMaxLength(45)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("district");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("postal_code");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("addresses", "users");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ISO3166Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("Varchar")
                        .HasColumnName("iso_3166_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("ISO3166Code", "Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_countries_iso_3166_code_name");

                    b.ToTable("countries", "users");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Currency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Iso4217Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("Varchar")
                        .HasColumnName("iso_4217_code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("Varchar")
                        .HasColumnName("name");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("Char")
                        .HasColumnName("symbol");

                    b.HasKey("Id");

                    b.HasIndex("Iso4217Code", "Name")
                        .IsUnique()
                        .HasDatabaseName("UQ_currencies_iso_4217_code_name");

                    b.ToTable("currencies", "banking");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("Varchar")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("UQ_genders_type");

                    b.ToTable("genders", "users");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.PersonalInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("Date")
                        .HasColumnName("date_of_birth");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(320)
                        .HasColumnType("Varchar")
                        .HasColumnName("email_address");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(81)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("full_name");

                    b.Property<int>("GenderId")
                        .HasColumnType("int")
                        .HasColumnName("gender_id");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(17)
                        .HasColumnType("Varchar")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("GenderId");

                    b.HasIndex("EmailAddress", "PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("UQ_personal_information_email_address_phone_number");

                    b.ToTable("personal_information", "users");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("Decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<int>("CurrencyId")
                        .HasColumnType("Int")
                        .HasColumnName("currency_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("smalldatetime")
                        .HasColumnName("date");

                    b.Property<int>("DestinationAccountId")
                        .HasColumnType("Int")
                        .HasColumnName("destination_account_id");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("Decimal(18,2)")
                        .HasColumnName("exchange_rate");

                    b.Property<decimal>("Fee")
                        .HasColumnType("Decimal(18,2)")
                        .HasColumnName("fee");

                    b.Property<string>("Note")
                        .HasMaxLength(256)
                        .HasColumnType("Nvarchar")
                        .HasColumnName("note");

                    b.Property<int>("SourceAccountId")
                        .HasColumnType("Int")
                        .HasColumnName("source_account_id");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("Int")
                        .HasColumnName("transaction_status_id");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("Int")
                        .HasColumnName("transaction_type_id");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DestinationAccountId");

                    b.HasIndex("SourceAccountId");

                    b.HasIndex("TransactionStatusId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("transactions", "banking");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.TransactionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("Varchar")
                        .HasColumnName("status");

                    b.HasKey("Id");

                    b.HasIndex("Status")
                        .IsUnique()
                        .HasDatabaseName("UQ_transaction_statuses_status");

                    b.ToTable("transaction_statuses", "banking");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Varchar")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("Type")
                        .IsUnique()
                        .HasDatabaseName("UQ_transaction_types_type");

                    b.ToTable("transaction_types", "banking");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Account", b =>
                {
                    b.HasOne("PayCard.Infrastructure.Database.Models.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_accounts_currencies_currency_id");

                    b.HasOne("PayCard.Infrastructure.Database.Models.PersonalInformation", "PersonalInformation")
                        .WithMany("Accounts")
                        .HasForeignKey("PersonalInformationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_accounts_personal_information_personal_information_id");

                    b.Navigation("Currency");

                    b.Navigation("PersonalInformation");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Address", b =>
                {
                    b.HasOne("PayCard.Infrastructure.Database.Models.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_adresses_countries_country_id");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.PersonalInformation", b =>
                {
                    b.HasOne("PayCard.Infrastructure.Database.Models.Address", "Address")
                        .WithMany("PersonalInformation")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_personal_information_addresses_address_id");

                    b.HasOne("PayCard.Infrastructure.Database.Models.Gender", "Gender")
                        .WithMany("PersonalInformation")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_personal_information_genders_gender_id");

                    b.Navigation("Address");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Transaction", b =>
                {
                    b.HasOne("PayCard.Infrastructure.Database.Models.Currency", "Currency")
                        .WithMany("Transactions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_transactions_currencies_currency_id");

                    b.HasOne("PayCard.Infrastructure.Database.Models.Account", "DestinationAccount")
                        .WithMany()
                        .HasForeignKey("DestinationAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PayCard.Infrastructure.Database.Models.Account", "SourceAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("SourceAccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_transactions_accounts_account_id");

                    b.HasOne("PayCard.Infrastructure.Database.Models.TransactionStatus", "Status")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionStatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_transactions_transaction_statuses_transaction_status_id");

                    b.HasOne("PayCard.Infrastructure.Database.Models.TransactionType", "TransactionType")
                        .WithMany("Transactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_transactions_transaction_types_transaction_type_id");

                    b.Navigation("Currency");

                    b.Navigation("DestinationAccount");

                    b.Navigation("SourceAccount");

                    b.Navigation("Status");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Address", b =>
                {
                    b.Navigation("PersonalInformation");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Currency", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.Gender", b =>
                {
                    b.Navigation("PersonalInformation");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.PersonalInformation", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.TransactionStatus", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PayCard.Infrastructure.Database.Models.TransactionType", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
